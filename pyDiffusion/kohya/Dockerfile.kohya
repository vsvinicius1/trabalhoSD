# syntax=docker/dockerfile:1

ARG DEBIAN_FRONTEND=noninteractive
ARG DEBIAN_PRIORITY=critical
ARG PIP_PREFER_BINARY=1

FROM base AS kohya

# New root dir
ENV ROOT_DIR=/kohya_ss
WORKDIR /

# set up some important environment variables
ARG DEBIAN_FRONTEND
ARG DEBIAN_PRIORITY
ARG PIP_PREFER_BINARY

ENV LC_ALL=C.UTF-8
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=utf-8

# CUDA-related
ENV CUDA_LAUNCH_BLOCKING=0
ENV CUDA_MODULE_LOADING=LAZY
ENV SAFETENSORS_FAST_GPU=1
ENV TORCH_ALLOW_TF32_CUBLAS_OVERRIDE=1
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
ENV NVIDIA_REQUIRE_CUDA=cuda>=11.8 driver>=450

# fix an issue with a dependency
ENV LD_PRELOAD=libtcmalloc.so

# PATHs
ENV PATH=$PATH:/usr/local/cuda/bin
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64

# Install xformers and triton
ARG XFORMERS_VERSION
ARG TRITON_VERSION
ARG BNB_VERSION
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install --no-deps --pre \
    xformers==${XFORMERS_VERSION} \
    triton==${TRITON_VERSION} \
    bitsandbytes==${BNB_VERSION}

# Install dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get -y install --no-install-recommends \
    python3-tk \
    ffmpeg \
    libsm6 \
    libxext6 \
    libgl1-mesa-glx \
    nano

# Install other CUDA libraries
ARG CUDA_RELEASE
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get -y install --no-install-recommends \
    cuda-libraries-dev-${CUDA_RELEASE} \
    cuda-cudart-dev-${CUDA_RELEASE} \
  && apt-get clean

# Clone the repo
ARG KOHYA_SS_REF
ARG KOHYA_SS_REPO
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  git clone ${KOHYA_SS_REPO} ${ROOT_DIR} \
  && cd ${ROOT_DIR} \
  && git reset --hard ${KOHYA_SS_REF} \
  && git submodule update --init --recursive

# Install requirements
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  cd ${ROOT_DIR} \
  && git fetch \
  && git reset --hard ${KOHYA_SS_REF} \
  && git submodule update --init --recursive \
  && pip install -r requirements.txt

# Install OpenCV and TensorRT, reinstall bitsandbytes to get latest, add Lion optimizer
ARG LION_VERSION
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install -U \
    opencv-python-headless \
    wandb \
    tensorrt \
    bitsandbytes==${BNB_VERSION} \
    lion-pytorch==${LION_VERSION}

# Drop in entrypoint
COPY ./entrypoint_kohya.sh /docker/entrypoint.sh

# Set up the entrypoint
WORKDIR ${ROOT_DIR}
ENV CLI_ARGS=""
ENV DATA_DIR=/data
ENV KOHYA_PORT=7681
ENV KOHYA_SCRIPT=kohya_gui.py

EXPOSE ${KOHYA_PORT}
ENTRYPOINT [ "/docker/entrypoint.sh" ]
CMD python -u "${KOHYA_SCRIPT}" --server_port "${KOHYA_PORT}" --listen 0.0.0.0 ${CLI_ARGS}
